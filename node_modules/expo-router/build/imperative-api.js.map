{"version":3,"file":"imperative-api.js","sourceRoot":"","sources":["../src/imperative-api.ts"],"names":[],"mappings":";;;AAAA,8DAAoD;AAwBvC,QAAA,MAAM,GAAW;IAC5B,QAAQ,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,oBAAK,CAAC,QAAQ,CAAC,IAAI,CAAC;IACxC,IAAI,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,oBAAK,CAAC,IAAI,CAAC,IAAI,CAAC;IAChC,OAAO,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,oBAAK,CAAC,OAAO,CAAC,KAAK,CAAC;IACxC,UAAU,EAAE,GAAG,EAAE,CAAC,oBAAK,CAAC,UAAU,EAAE;IACpC,UAAU,EAAE,GAAG,EAAE,CAAC,oBAAK,CAAC,UAAU,EAAE;IACpC,OAAO,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,oBAAK,CAAC,OAAO,CAAC,IAAI,CAAC;IACtC,IAAI,EAAE,GAAG,EAAE,CAAC,oBAAK,CAAC,MAAM,EAAE;IAC1B,SAAS,EAAE,GAAG,EAAE,CAAC,oBAAK,CAAC,SAAS,EAAE;IAClC,SAAS,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,oBAAK,CAAC,SAAS,CAAC,MAAM,CAAC;CAC/C,CAAC","sourcesContent":["import { store } from './global-state/router-store';\nimport { Href, RouteParamInput, Routes } from './types';\n\nexport type Router = {\n  /** Go back in the history. */\n  back: () => void;\n  /** If there's history that supports invoking the `back` function. */\n  canGoBack: () => boolean;\n  /** Navigate to the provided href using a push operation if possible. */\n  push: <T extends string | object>(href: Href<T>) => void;\n  /** Navigate to the provided href. */\n  navigate: <T extends string | object>(href: Href<T>) => void;\n  /** Navigate to route without appending to the history. */\n  replace: <T extends string | object>(href: Href<T>) => void;\n  /** Navigate to a screen with a stack lower than the current screen. Using the provided count if possible, otherwise 1. */\n  dismiss: (count?: number) => void;\n  /** Navigate to first screen within the lowest stack. */\n  dismissAll: () => void;\n  /** If there's history that supports invoking the `dismiss` and `dismissAll` function. */\n  canDismiss: () => boolean;\n  /** Update the current route query params. */\n  setParams: <T extends Routes>(params: Partial<RouteParamInput<T>>) => void;\n};\n\nexport const router: Router = {\n  navigate: (href) => store.navigate(href),\n  push: (href) => store.push(href),\n  dismiss: (count) => store.dismiss(count),\n  dismissAll: () => store.dismissAll(),\n  canDismiss: () => store.canDismiss(),\n  replace: (href) => store.replace(href),\n  back: () => store.goBack(),\n  canGoBack: () => store.canGoBack(),\n  setParams: (params) => store.setParams(params),\n};\n"]}